[{content={parts=[{text=--FlashCardSeparator--
Single [What is the time complexity of Kruskal's algorithm with an efficient implementation of union and find?] --InteriorSeparator-- O(m log n) --InteriorSeparator--medium
--FlashCardSeparator--
Single [What does dM(u) represent in the context of graph matching?] --InteriorSeparator-- The degree of vertex 'u' in the subgraph spanned by the matching M. --InteriorSeparator--easy
--FlashCardSeparator--
Single [Define a vertex that is 'exposed' with respect to a matching M.] --InteriorSeparator-- A vertex 'u' E V with dM(u) = 0. --InteriorSeparator--medium
--FlashCardSeparator--
Multiple [Which of the following statements about edge-covers are correct?] --InteriorSeparator-- 1.(right) Every vertex in G is incident to at least one edge in F. 2.(wrong) If F is an edge-cover, any subset of F is also an edge-cover. 3.(right) An edge-cover may not exist if the graph has isolated vertices. 4.(wrong) Edge covers only exists in bipartite graphs. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What is the relationship between the cardinality of a maximum matching (M*) and a minimum edge-cover (F*) in a graph without isolated vertices?] --InteriorSeparator-- |M*| + |F*| = n, where n is the number of vertices. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What is a 'cut' in a connected graph?] --InteriorSeparator-- A subset A Q E such that there exists a bipartition (S, T) of V with A = {uv G E: u G S, v G T}. G\A is no longer connected. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What is the meaning of 'xA' in the context of Exercise 7?] --InteriorSeparator-- The m-dimensional characteristic vector of a subset A Q E in GFm, where xAi = 1 <-> ei E A. --InteriorSeparator--hard
--FlashCardSeparator--
Single [What is the core idea of Prim's algorithm?] --InteriorSeparator-- To iteratively build a minimum spanning tree by adding the minimum cost edge connecting a vertex in the current tree to a vertex outside the tree. --InteriorSeparator--medium
--FlashCardSeparator--
Single [How are sets of vertices represented in an efficient implementation of Kruskal's algorithm?] --InteriorSeparator-- Using trees, where each tree's root designates the set of vertices stored within it. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What is the purpose of the 'find(u)' function in Kruskal's algorithm?] --InteriorSeparator-- To determine the set (tree) to which the vertex 'u' belongs by returning the root of the tree. --InteriorSeparator--easy
--FlashCardSeparator--
Single [What information does the 'pred' array store in the context of the union-find data structure?] --InteriorSeparator-- pred[v] : the vertex before v on the unique path to v from the root of the tree storing the set to which v belongs. --InteriorSeparator--medium
--FlashCardSeparator--
Multiple [Regarding the initialization step in one of the union-find implementations discussed, what are the values of pred[u] after the initialization for all u in V?] --InteriorSeparator-- 1.(wrong) 0 2.(right) -1 3.(wrong) 1 4.(wrong) u --InteriorSeparator--easy
--FlashCardSeparator--
Single [Explain the "union" procedure's role when using negative values to indicate the size of a tree in Kruskal's algorithm.] --InteriorSeparator--  It merges two trees by making the root of the smaller tree a child of the root of the larger tree, updating the 'pred' values and maintaining the cardinality of the set stored in the root. --InteriorSeparator--hard
--FlashCardSeparator--
Single [Explain the concept of the Ackermann function in relation to Kruskal's algorithm complexity.] --InteriorSeparator-- It is used in defining the α(m, n) function, which is an extremely slow-growing function, making the time complexity of Kruskal's algorithm practically linear when using specific union-find optimizations. --InteriorSeparator--hard
--FlashCardSeparator--
Multiple [Which of the following are true regarding the general method for finding MSTs?] --InteriorSeparator-- 1.(right) It starts with a family of n disjoint trees. 2.(wrong) It selects edges within existing trees. 3.(right) It chooses a minimum cost edge to merge trees. 4.(wrong) The number of disjoint trees increases at each step. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What does the notation `c(T)` represents in the context of minimum spanning trees?] --InteriorSeparator-- The sum of the costs of all edges in the spanning tree T. --InteriorSeparator--easy
--FlashCardSeparator--
Single [What does the condition *Vk E {0, . . . , n — 1} there exists a spanning tree Ti, MST of G, such that E(Tk) Q E(T,*)* mean in the proof about MST?] --InteriorSeparator-- At each step k, there exists a minimum spanning tree that contains all the edges added up to that step. --InteriorSeparator--hard
--FlashCardSeparator--
Single [In Prim's strategy, how is the tree Tsk selected at each step?] --InteriorSeparator-- Tsk is the maximum order tree in the family Tk. --InteriorSeparator--easy
--FlashCardSeparator--
Single [What is the purpose of the vectors 'alpha' and 'beta' in Dijkstra's implementation for Prim's algorithm?] --InteriorSeparator-- 'alpha' stores vertices from V(G), and 'beta' stores real numbers representing the cost to connect a vertex 'j' to the current tree. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What happens to the height h(u) of a node during the union procedure that make the root of the new tree that of the tree storing a smaller number of vertices?] --InteriorSeparator-- The h(u) augmenting of h(u) to O(n) during the algorithm. --InteriorSeparator--hard
--FlashCardSeparator--
Multiple [What are properties of the family of matchings MG in a graph G?] --InteriorSeparator-- 1.(right) Empty set belongs to MG. 2.(right) If M belongs to MG and M' is a subset of M, then M' belongs to MG. 3.(wrong) The union of two matchings in MG always belongs to MG. 4.(wrong) If M is a matching, then the edges not in M forms a matching in G. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What is the goal of Exercise 6 regarding Steiner trees?] --InteriorSeparator-- Prove that a Steiner tree can be determined in polynomial time and relate Steiner trees in the original and complete graphs. --InteriorSeparator--hard
--FlashCardSeparator--
Single [What is the main idea in Exercise 13 related to graph matching and game theory?] --InteriorSeparator-- The first player always wins if and only if the graph does not have a perfect matching. --InteriorSeparator--medium
--FlashCardSeparator--
Single [In Kruskal's algorithm, what is the condition to add an edge 'ei' to the tree 'T'?] --InteriorSeparator-- If adding the edge 'ei' to the tree 'T' does not create a cycle. --InteriorSeparator--easy
--FlashCardSeparator--
Single [What is an edge-cover in a graph G?] --InteriorSeparator-- Any set of edges F Q E such that every vertex 'u' in V(G) is incident to at least one edge in F (dF(u) >= 1, for all u). --InteriorSeparator--easy
--FlashCardSeparator--
Single [What's the connection between max matchings, linear programming, and bipartite graphs?] --InteriorSeparator-- Because of Integer linear programming formulation the maximum mathcing problem for bipartite graphs is easy if the graph is bipartite. --InteriorSeparator--hard
--FlashCardSeparator--
Single [What does the exercise about second-best minimum cost spanning trees explores?] --InteriorSeparator-- it explores how does the second-best minimum cost spanning tree differ from the minimum cost spanning tree and how to find it. --InteriorSeparator--medium
--FlashCardSeparator--
Single [What does `c(e)` mean in the context of the minimum spanning tree (MST) problem?] --InteriorSeparator-- The cost of edge `e`. --InteriorSeparator--easy
--FlashCardSeparator--
Single [What is the second classical strategy for general method choosing tree Tf?] --InteriorSeparator-- The second strategy TS,k is one of the two trees in the family T,k, connected by an edge of minimum cost over all edges With extremities on different trees of the family. --InteriorSeparator--medium
--FlashCardSeparator--
Single [Why is the third solution using the Ackermann function and collapsing find calls practically linear implementation of Kruskal's algorithm?] --InteriorSeparator-- Because A(m,n) is an extremely slow increasing function, and for practical values of n alpha(m, n) g 3, hence, the third solution is practically a linear implementation (C')('m)) of Kruskal's algorithm. --InteriorSeparator--hard
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=7928, endIndex=8078, uri=https://profs.info.uaic.ro/~olariu/curent/AG/files/ag6.pdf}]}, avgLogprobs=-0.36715094498761996}]